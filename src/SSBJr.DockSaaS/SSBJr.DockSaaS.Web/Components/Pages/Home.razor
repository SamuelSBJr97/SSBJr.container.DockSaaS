@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@inject IDashboardService DashboardService
@inject IServiceInstanceService ServiceInstanceService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS
@inject ILogger<Home> Logger
@implements IAsyncDisposable

<PageTitle>Dashboard - DockSaaS</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Dashboard</h1>
            <div class="flex gap-2 items-center">
                <button @onclick="RefreshData" 
                        class="p-2 text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700"
                        title="Refresh Dashboard">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                    </svg>
                </button>
                <label class="inline-flex items-center">
                    <input @bind="autoRefresh" type="checkbox" 
                           class="form-checkbox h-4 w-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"/>
                    <span class="ml-2 text-sm text-gray-900 dark:text-white">Auto Refresh</span>
                </label>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="w-full bg-gray-200 rounded-full h-2 mb-4 dark:bg-gray-700">
                <div class="bg-blue-600 h-2 rounded-full animate-pulse"></div>
            </div>
        }

        @if (dashboardStats != null)
        {
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <!-- Stats Cards -->
                <div class="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-blue-100 dark:bg-blue-900 mr-4">
                            <svg class="w-6 h-6 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"/>
                            </svg>
                        </div>
                        <div>
                            <h2 class="text-2xl font-bold text-gray-900 dark:text-white">@dashboardStats.TotalUsers</h2>
                            <p class="text-sm text-gray-500 dark:text-gray-400">Total Users</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-green-100 dark:bg-green-900 mr-4">
                            <svg class="w-6 h-6 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </div>
                        <div>
                            <h2 class="text-2xl font-bold text-gray-900 dark:text-white">@dashboardStats.ActiveServices</h2>
                            <p class="text-sm text-gray-500 dark:text-gray-400">Active Services</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-yellow-100 dark:bg-yellow-900 mr-4">
                            <svg class="w-6 h-6 text-yellow-600 dark:text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4"/>
                            </svg>
                        </div>
                        <div>
                            <h2 class="text-2xl font-bold text-gray-900 dark:text-white">@FormatBytes(dashboardStats.TotalStorage)</h2>
                            <p class="text-sm text-gray-500 dark:text-gray-400">Storage Used</p>
                            <div class="w-full bg-gray-200 rounded-full h-2 mt-2">
                                <div class="@GetUsageProgressClass(dashboardStats.StorageUsagePercent) h-2 rounded-full" style="width: @dashboardStats.StorageUsagePercent.ToString("F1")%"></div>
                            </div>
                            <span class="text-xs text-gray-500 dark:text-gray-400">
                                @dashboardStats.StorageUsagePercent.ToString("F1")% of limit
                            </span>
                        </div>
                    </div>
                </div>

                <div class="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6">
                    <div class="flex items-center">
                        <div class="p-3 rounded-full bg-purple-100 dark:bg-purple-900 mr-4">
                            <svg class="w-6 h-6 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"/>
                            </svg>
                        </div>
                        <div>
                            <h2 class="text-2xl font-bold text-gray-900 dark:text-white">@dashboardStats.TotalApiCalls.ToString("N0")</h2>
                            <p class="text-sm text-gray-500 dark:text-gray-400">API Calls</p>
                            <div class="w-full bg-gray-200 rounded-full h-2 mt-2">
                                <div class="@GetUsageProgressClass(dashboardStats.ApiCallsUsagePercent) h-2 rounded-full" style="width: @dashboardStats.ApiCallsUsagePercent.ToString("F1")%"></div>
                            </div>
                            <span class="text-xs text-gray-500 dark:text-gray-400">
                                @dashboardStats.ApiCallsUsagePercent.ToString("F1")% of limit
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- System Health and Usage Trends Row -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
                <!-- System Health -->
                <div class="bg-white dark:bg-gray-800 shadow-lg rounded-lg">
                    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
                        <h3 class="text-lg font-medium text-gray-900 dark:text-white">System Health</h3>
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            Healthy
                        </span>
                    </div>
                    <div class="p-6">
                        <div class="space-y-3">
                            <div>
                                <h4 class="text-sm font-medium text-gray-900 dark:text-white mb-2">Service Status</h4>
                                <div class="flex gap-2">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                        Running: @serviceInstances.Count(s => s.Status == "Running")
                                    </span>
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                        Stopped: @serviceInstances.Count(s => s.Status == "Stopped")
                                    </span>
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                        Error: @serviceInstances.Count(s => s.Status == "Error")
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Usage Trends Chart -->
                <div class="bg-white dark:bg-gray-800 shadow-lg rounded-lg">
                    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                        <h3 class="text-lg font-medium text-gray-900 dark:text-white">Usage Trends (7 days)</h3>
                    </div>
                    <div class="p-6">
                        <div id="usageChart" style="height: 200px;"></div>
                    </div>
                </div>
            </div>

            <!-- Services and Activities Row -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Services Overview -->
                <div class="lg:col-span-2 bg-white dark:bg-gray-800 shadow-lg rounded-lg">
                    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
                        <h3 class="text-lg font-medium text-gray-900 dark:text-white">Service Instances</h3>
                        <a href="/services/create" 
                           class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                            </svg>
                            Create Service
                        </a>
                    </div>
                    <div class="p-6">
                            @if (serviceInstances.Any())
                            {
                                <div class="overflow-x-auto bg-white rounded-lg shadow">
                                    @if (isLoading)
                                    {
                                        <div class="p-6 text-center text-gray-500">Loading...</div>
                                    }
                                    else
                                    {
                                        <table class="min-w-full">
                                            <thead class="bg-gray-50">
                                                <tr>
                                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Usage</th>
                                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Accessed</th>
                                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody class="bg-white divide-y divide-gray-200">
                                                @foreach (var service in serviceInstances.Take(5))
                                                {
                                                    <tr class="hover:bg-gray-50">
                                                        <td class="px-6 py-4 whitespace-nowrap">
                                                            <div class="flex items-center">
                                                                <span class="mr-2 text-sm">@GetServiceIcon(service.ServiceType)</span>
                                                                <span class="text-sm font-medium text-gray-900">@service.Name</span>
                                                            </div>
                                                        </td>
                                                        <td class="px-6 py-4 whitespace-nowrap">
                                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                                                @service.ServiceType
                                                            </span>
                                                        </td>
                                                        <td class="px-6 py-4 whitespace-nowrap">
                                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetStatusBadgeClass(service.Status)">
                                                                @service.Status
                                                            </span>
                                                        </td>
                                                        <td class="px-6 py-4 whitespace-nowrap">
                                                            @if (service.UsageQuota > 0)
                                                            {
                                                                var percentage = (double)service.CurrentUsage / service.UsageQuota * 100;
                                                                <div class="w-24">
                                                                    <div class="bg-gray-200 rounded-full h-2">
                                                                        <div class="@GetUsageProgressClass(percentage) h-2 rounded-full" style="width: @percentage.ToString("F1")%"></div>
                                                                    </div>
                                                                    <span class="text-xs text-gray-500">@percentage.ToString("F1")%</span>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                <span class="text-xs text-gray-500">@FormatBytes(service.CurrentUsage)</span>
                                                            }
                                                        </td>
                                                        <td class="px-6 py-4 whitespace-nowrap">
                                                            <span class="text-xs text-gray-500">
                                                                @(service.LastAccessedAt?.ToString("MMM dd, HH:mm") ?? "Never")
                                                            </span>
                                                        </td>
                                                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                            <div class="flex justify-end space-x-2">
                                                                @if (service.Status == "Stopped")
                                                                {
                                                                    <button @onclick="@(() => StartService(service.Id))" 
                                                                            class="text-green-600 hover:text-green-900" 
                                                                            title="Start Service">
                                                                        ▶️
                                                                    </button>
                                                                }
                                                                else if (service.Status == "Running")
                                                                {
                                                                    <button @onclick="@(() => StopService(service.Id))" 
                                                                            class="text-red-600 hover:text-red-900" 
                                                                            title="Stop Service">
                                                                        ⏹️
                                                                    </button>
                                                                }
                                                                <a href="/services/@service.Id" 
                                                                   class="text-blue-600 hover:text-blue-900" 
                                                                   title="View Details">
                                                                    👁️
                                                                </a>
                                                                <button @onclick="@(() => ShowMetrics(service.Id))" 
                                                                        class="text-purple-600 hover:text-purple-900" 
                                                                        title="View Metrics">
                                                                    📊
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                </div>
                                
                                @if (serviceInstances.Count > 5)
                                {
                                    <div class="mt-4 text-center">
                                        <a href="/services" class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                                            View All Services (@serviceInstances.Count)
                                        </a>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-center py-8">
                                    <div class="text-6xl text-gray-400 mb-4">☁️</div>
                                    <h6 class="text-lg font-medium text-gray-600 mb-4">No services yet</h6>
                                    <p class="text-sm text-gray-500 dark:text-gray-400">Create your first service to get started</p>
                                    <a href="/services/create" 
                                       class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 mt-3">
                                        ➕ Create First Service
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Recent Activities -->
                <div class="bg-white dark:bg-gray-800 shadow-lg rounded-lg">
                    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                        <h3 class="text-lg font-medium text-gray-900 dark:text-white">Recent Activities</h3>
                    </div>
                    <div class="p-6">
                        @if (recentActivities.Any())
                        {
                            <ul class="space-y-2">
                                @foreach (var activity in recentActivities.Take(8))
                                {
                                    <li class="flex items-center py-2">
                                        <div class="flex items-center w-full">
                                            <span class="w-4 h-4 mr-3 text-sm">🔄</span>
                                            <div class="flex-1">
                                                <span class="text-sm">@activity.Action</span>
                                                <span class="text-xs text-gray-500 dark:text-gray-400 block">
                                                    @activity.UserName - @activity.Timestamp.ToString("MMM dd, HH:mm")
                                                </span>
                                            </div>
                                        </div>
                                    </li>
                                    <hr class="my-1" />
                                }
                            </ul>
                            
                            <div class="mt-3 text-center">
                                <a href="/logs" class="text-blue-600 hover:text-blue-800 text-sm">
                                    View All Activities
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <span class="text-gray-500">📊</span>
                                <div class="mt-2 text-gray-500">No activities yet</div>
                            </div>
                        }
                    </div>
                </div>
        }
        else if (!isLoading)
        {
            <!-- Fallback when data fails to load -->
            <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-yellow-700">
                            Unable to load dashboard data. Please refresh the page or check your connection.
                            <button @onclick="RefreshData" class="font-medium underline text-yellow-700 hover:text-yellow-600 ml-2">
                                Retry
                            </button>
                        </p>
                    </div>
                </div>
            </div>
        }

        <!-- Service Metrics Dialog -->
        @if (showMetricsDialog)
        {
            <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
                <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-4xl w-full mx-4">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Service Metrics</h3>
                    <div id="serviceMetricsChart" style="height: 400px;" class="mb-4"></div>
                    <div class="flex justify-end">
                        <button @onclick="CloseMetricsDialog" class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">
                            Close
                        </button>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="flex items-center justify-center" style="height: 70vh;">
            <div class="bg-white dark:bg-gray-800 p-8 text-center rounded-lg shadow-lg max-w-md">
                <span class="text-6xl">☁️</span>
                <h4 class="text-2xl font-semibold mt-4 mb-2 text-gray-900 dark:text-white">Welcome to DockSaaS</h4>
                <p class="text-gray-600 dark:text-gray-400 mb-6">
                    Please sign in to access your dashboard and manage your services.
                </p>
                <a href="/login" class="block w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 mb-2 text-center">
                    Sign In
                </a>
                <a href="/welcome" class="block w-full text-gray-600 hover:text-gray-800 py-2 px-4 text-center text-sm">
                    Learn More
                </a>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

<style>
    .stat-card {
        transition: transform 0.2s ease-in-out;
    }
    .stat-card:hover {
        transform: translateY(-2px);
    }
    .activity-list .mud-list-item {
        padding: 8px 0;
    }
</style>

@code {
    private bool isLoading = true;
    private bool autoRefresh = false;
    private DashboardStatsDto? dashboardStats;
    private List<ServiceInstanceDto> serviceInstances = new();
    private List<AuditLogDto> recentActivities = new();
    private Timer? refreshTimer;
    private bool showMetricsDialog = false;
    private Guid selectedServiceId;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Dashboard: OnInitializedAsync called");
        
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        Logger.LogInformation("Dashboard: Authentication state - IsAuthenticated: {IsAuthenticated}", 
            authState.User.Identity?.IsAuthenticated);
            
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Logger.LogInformation("Dashboard: User is authenticated, loading data");
            await LoadDashboardData();
            await InitializeCharts();
        }
        else
        {
            Logger.LogInformation("Dashboard: User is not authenticated");
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("Dashboard: OnAfterRenderAsync (first render)");
            
            // Initialize charts after DOM is ready
            await Task.Delay(500);
            await UpdateUsageChart();
        }
    }

    private async Task LoadDashboardData()
    {
        isLoading = true;
        Logger.LogInformation("Dashboard: Loading dashboard data");
        
        try
        {
            // Load data sequentially for better error handling
            dashboardStats = await DashboardService.GetDashboardStatsAsync();
            Logger.LogInformation("Dashboard: Stats loaded - TotalUsers: {TotalUsers}", dashboardStats?.TotalUsers ?? 0);
            
            serviceInstances = await ServiceInstanceService.GetServiceInstancesAsync();
            Logger.LogInformation("Dashboard: Service instances loaded - Count: {Count}", serviceInstances.Count);
            
            recentActivities = await DashboardService.GetRecentActivitiesAsync(10);
            Logger.LogInformation("Dashboard: Recent activities loaded - Count: {Count}", recentActivities.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Dashboard: Failed to load dashboard data");
            Console.WriteLine($"Failed to load dashboard data: {ex.Message}");
            
            // Provide fallback data to prevent UI errors
            dashboardStats ??= new DashboardStatsDto();
            serviceInstances ??= new List<ServiceInstanceDto>();
            recentActivities ??= new List<AuditLogDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            Logger.LogInformation("Dashboard: Data loading completed, isLoading: {IsLoading}", isLoading);
        }
    }

    private async Task RefreshData()
    {
        Logger.LogInformation("Dashboard: Manual refresh requested");
        await LoadDashboardData();
        await UpdateUsageChart();
        Console.WriteLine("Dashboard refreshed");
    }

    private async Task InitializeCharts()
    {
        try
        {
            await JS.InvokeVoidAsync("initializeCharts");
            Logger.LogInformation("Dashboard: Charts initialized successfully");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Dashboard: Error initializing charts (non-critical)");
        }
    }

    private async Task UpdateUsageChart()
    {
        try
        {
            // Generate sample data for demonstration
            var sampleData = new { Trends = new { } };
            await JS.InvokeVoidAsync("updateUsageChart", sampleData);
            Logger.LogDebug("Dashboard: Usage chart updated");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Dashboard: Error updating chart (non-critical)");
        }
    }

    private async Task StartService(Guid serviceId)
    {
        Logger.LogInformation("Dashboard: Starting service {ServiceId}", serviceId);
        var result = await ServiceInstanceService.StartServiceInstanceAsync(serviceId);
        if (result)
        {
            Console.WriteLine("Service started successfully");
            await LoadDashboardData();
        }
        else
        {
            Console.WriteLine("Failed to start service");
        }
    }

    private async Task StopService(Guid serviceId)
    {
        Logger.LogInformation("Dashboard: Stopping service {ServiceId}", serviceId);
        var result = await ServiceInstanceService.StopServiceInstanceAsync(serviceId);
        if (result)
        {
            Console.WriteLine("Service stopped successfully");
            await LoadDashboardData();
        }
        else
        {
            Console.WriteLine("Failed to stop service");
        }
    }

    private async Task ShowMetrics(Guid serviceId)
    {
        Logger.LogInformation("Dashboard: Showing metrics for service {ServiceId}", serviceId);
        selectedServiceId = serviceId;
        showMetricsDialog = true;
        
        // Load and display service metrics
        var metrics = await DashboardService.GetServiceMetricsAsync(serviceId);
        if (metrics != null)
        {
            await JS.InvokeVoidAsync("updateServiceMetricsChart", metrics);
        }
    }

    private void CloseMetricsDialog()
    {
        showMetricsDialog = false;
    }

    // Auto-refresh functionality
    private void OnAutoRefreshChanged(ChangeEventArgs e)
    {
        autoRefresh = (bool)(e.Value ?? false);
        Logger.LogInformation("Dashboard: Auto-refresh {Status}", autoRefresh ? "enabled" : "disabled");
        
        if (autoRefresh)
        {
            refreshTimer = new Timer(async _ => await InvokeAsync(async () =>
            {
                await LoadDashboardData();
                await UpdateUsageChart();
                StateHasChanged();
            }), null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
        }
        else
        {
            refreshTimer?.Dispose();
            refreshTimer = null;
        }
    }

    // Helper methods for styling
    private string GetStatusColor(string status) => status switch
    {
        "Running" => "success",
        "Stopped" => "default",
        "Error" => "error",
        "Created" => "info",
        _ => "default"
    };

    private string GetUsageColor(double percentage) => percentage switch
    {
        >= 90 => "error",
        >= 80 => "warning",
        >= 60 => "info",
        _ => "success"
    };

    private string GetActivityColor(string level) => level switch
    {
        "Error" => "error",
        "Warning" => "warning",
        "Info" => "info",
        _ => "default"
    };

    private string GetServiceIcon(string serviceType) => serviceType switch
    {
        "S3Storage" => "💾",
        "RDSDatabase" => "🗄️",
        "NoSQLDatabase" => "📊",
        "Queue" => "📋",
        "Function" => "⚡",
        "Kafka" => "🔄",
        _ => "☁️"
    };

    private string GetActivityIcon(string action) => action switch
    {
        var a when a.Contains("Create") => "➕",
        var a when a.Contains("Delete") => "🗑️",
        var a when a.Contains("Update") => "✏️",
        var a when a.Contains("Start") => "▶️",
        var a when a.Contains("Stop") => "⏹️",
        var a when a.Contains("Login") => "🔑",
        _ => "ℹ️"
    };

    // Tailwind CSS helper methods
    private string GetStatusBadgeClass(string status) => status switch
    {
        "Running" => "bg-green-100 text-green-800",
        "Stopped" => "bg-gray-100 text-gray-800",
        "Error" => "bg-red-100 text-red-800",
        "Created" => "bg-blue-100 text-blue-800",
        _ => "bg-gray-100 text-gray-800"
    };

    private string GetUsageBadgeClass(double percentage) => percentage switch
    {
        >= 90 => "bg-red-100 text-red-800",
        >= 80 => "bg-yellow-100 text-yellow-800",
        >= 60 => "bg-blue-100 text-blue-800",
        _ => "bg-green-100 text-green-800"
    };

    private string GetUsageProgressClass(double percentage) => percentage switch
    {
        >= 90 => "bg-red-600",
        >= 80 => "bg-yellow-600",
        >= 60 => "bg-blue-600",
        _ => "bg-green-600"
    };

    private string GetActionButtonClass(bool disabled, string enabledClass, string disabledClass) =>
        disabled ? disabledClass : enabledClass;

    private string FormatBytes(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    public ValueTask DisposeAsync()
    {
        refreshTimer?.Dispose();
        return ValueTask.CompletedTask;
    }
}

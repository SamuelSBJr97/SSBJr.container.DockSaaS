@page "/login"
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject ApiClient ApiClient
@inject ILogger<Login> Logger

<MudContainer Component="main" MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center mud-height-full">
    <MudPaper Elevation="25" Class="pa-8" Style="width: 100%; max-width: 400px;">
        <MudForm @ref="form" @bind-IsValid="@success">
            <div class="d-flex align-center justify-center mb-6">
                <MudText Typo="Typo.h4" Color="Color.Primary">DockSaaS</MudText>
            </div>
            
            <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-4">
                @(isRegister ? "Create Account" : "Sign In")
            </MudText>

            @if (!string.IsNullOrEmpty(apiConnectionStatus))
            {
                <MudAlert Severity="@(apiConnectionStatus.Contains("?") ? Severity.Success : Severity.Warning)" Class="mb-3">
                    @apiConnectionStatus
                </MudAlert>
            }

            @if (isRegister)
            {
                <MudTextField @bind-Value="registerRequest.FirstName"
                              For="@(() => registerRequest.FirstName)"
                              Label="First Name"
                              Variant="Variant.Outlined"
                              Required="true"
                              Class="mb-3" />

                <MudTextField @bind-Value="registerRequest.LastName"
                              For="@(() => registerRequest.LastName)"
                              Label="Last Name"
                              Variant="Variant.Outlined"
                              Required="true"
                              Class="mb-3" />

                <MudTextField @bind-Value="registerRequest.TenantName"
                              For="@(() => registerRequest.TenantName)"
                              Label="Company/Tenant Name"
                              Variant="Variant.Outlined"
                              Required="true"
                              Class="mb-3" />

                <MudTextField @bind-Value="registerRequest.Email"
                              For="@(() => registerRequest.Email)"
                              Label="Email"
                              Variant="Variant.Outlined"
                              InputType="InputType.Email"
                              Required="true"
                              Class="mb-3" />

                <MudTextField @bind-Value="registerRequest.Password"
                              For="@(() => registerRequest.Password)"
                              Label="Password"
                              Variant="Variant.Outlined"
                              InputType="InputType.Password"
                              Required="true"
                              Class="mb-3" />
            }
            else
            {
                <MudTextField @bind-Value="loginRequest.Email"
                              For="@(() => loginRequest.Email)"
                              Label="Email"
                              Variant="Variant.Outlined"
                              InputType="InputType.Email"
                              Required="true"
                              Class="mb-3" />

                <MudTextField @bind-Value="loginRequest.Password"
                              For="@(() => loginRequest.Password)"
                              Label="Password"
                              Variant="Variant.Outlined"
                              InputType="InputType.Password"
                              Required="true"
                              Class="mb-3" />

                <MudTextField @bind-Value="loginRequest.TenantName"
                              For="@(() => loginRequest.TenantName)"
                              Label="Tenant Name (Optional)"
                              Variant="Variant.Outlined"
                              Class="mb-3"
                              HelperText="Leave empty to use default tenant" />
            }

            @if (!isRegister)
            {
                <MudButton Variant="Variant.Text" 
                           Size="Size.Small" 
                           OnClick="PopulateDefaultCredentials"
                           Class="mb-3">
                    Use Default Admin Credentials
                </MudButton>
            }

            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true"
                       Class="mb-3"
                       OnClick="HandleSubmit"
                       Disabled="isLoading">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@(isRegister ? "Creating Account..." : "Signing In...")</MudText>
                }
                else
                {
                    @(isRegister ? "Create Account" : "Sign In")
                }
            </MudButton>

            <MudDivider Class="mb-3" />

            <MudButton Variant="Variant.Text"
                       Color="Color.Primary"
                       FullWidth="true"
                       OnClick="ToggleMode">
                @(isRegister ? "Already have an account? Sign In" : "Don't have an account? Sign Up")
            </MudButton>

            <MudButton Variant="Variant.Text"
                       Color="Color.Secondary"
                       Size="Size.Small"
                       FullWidth="true"
                       OnClick="TestApiConnection"
                       Class="mt-2">
                Test API Connection
            </MudButton>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MudForm form = null!;
    private bool success = false;
    private bool isLoading = false;
    private bool isRegister = false;
    private string apiConnectionStatus = "";

    private LoginRequest loginRequest = new();
    private RegisterRequest registerRequest = new();

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already logged in
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Logger.LogInformation("User already authenticated, redirecting to dashboard");
            Navigation.NavigateTo("/", true);
            return;
        }

        await TestApiConnection();
    }

    private void PopulateDefaultCredentials()
    {
        loginRequest.Email = "admin@docksaas.com";
        loginRequest.Password = "Admin123!";
        loginRequest.TenantName = "";
        
        Logger.LogInformation("Default credentials populated");
        Snackbar.Add("Default admin credentials loaded", Severity.Info);
    }

    private async Task TestApiConnection()
    {
        try
        {
            Logger.LogInformation("Testing API connection...");
            apiConnectionStatus = "?? Testing API connection...";
            StateHasChanged();

            // Use the new health check method that doesn't try to deserialize JSON
            var isHealthy = await ApiClient.CheckHealthAsync();
            
            if (isHealthy)
            {
                apiConnectionStatus = "? API connection successful";
                Logger.LogInformation("API connection test successful");
            }
            else
            {
                apiConnectionStatus = "?? API connection failed - check if API is running on https://localhost:7000";
                Logger.LogWarning("API connection test failed");
            }
        }
        catch (Exception ex)
        {
            apiConnectionStatus = $"? API connection error: {ex.Message}";
            Logger.LogError(ex, "API connection test error");
        }
        
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (!success) return;

        isLoading = true;
        bool result = false;

        try
        {
            Logger.LogInformation("Starting {Action} process", isRegister ? "registration" : "login");

            if (isRegister)
            {
                result = await AuthService.RegisterAsync(registerRequest);
                if (result)
                {
                    Snackbar.Add("Account created successfully! Welcome to DockSaaS.", Severity.Success);
                    Logger.LogInformation("Registration successful for user {Email}", registerRequest.Email);
                    
                    // Wait a moment for the auth state to be processed
                    await Task.Delay(500);
                    
                    // Get current user and notify authentication provider
                    var user = await AuthService.GetCurrentUserAsync();
                    if (user != null && AuthStateProvider is CustomAuthenticationStateProvider customProvider)
                    {
                        customProvider.MarkUserAsAuthenticated(user);
                        Logger.LogInformation("Authentication state updated for user {Email}", user.Email);
                        
                        // Wait for state change to propagate
                        await Task.Delay(200);
                    }
                    
                    // Navigate to dashboard
                    Navigation.NavigateTo("/", true);
                }
                else
                {
                    Snackbar.Add("Registration failed. Please check your information and try again.", Severity.Error);
                    Logger.LogWarning("Registration failed for user {Email}", registerRequest.Email);
                }
            }
            else
            {
                result = await AuthService.LoginAsync(loginRequest);
                if (result)
                {
                    Snackbar.Add("Welcome back!", Severity.Success);
                    Logger.LogInformation("Login successful for user {Email}", loginRequest.Email);
                    
                    // Wait a moment for the auth state to be processed
                    await Task.Delay(500);
                    
                    // Get current user and notify authentication provider
                    var user = await AuthService.GetCurrentUserAsync();
                    if (user != null && AuthStateProvider is CustomAuthenticationStateProvider customProvider)
                    {
                        customProvider.MarkUserAsAuthenticated(user);
                        Logger.LogInformation("Authentication state updated for user {Email}", user.Email);
                        
                        // Wait for state change to propagate
                        await Task.Delay(200);
                    }
                    
                    // Navigate to dashboard
                    Navigation.NavigateTo("/", true);
                }
                else
                {
                    Snackbar.Add("Login failed. Please check your credentials and try again.", Severity.Error);
                    Logger.LogWarning("Login failed for user {Email}", loginRequest.Email);
                    
                    // Test API connection again if login fails
                    await TestApiConnection();
                }
            }
        }
        catch (Exception ex)
        {
            var errorMessage = $"An error occurred: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
            Logger.LogError(ex, "Error during {Action}", isRegister ? "registration" : "login");
            
            // Test API connection again if there's an exception
            await TestApiConnection();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleMode()
    {
        isRegister = !isRegister;
        // Reset forms
        loginRequest = new();
        registerRequest = new();
        
        Logger.LogInformation("Toggled to {Mode} mode", isRegister ? "registration" : "login");
    }
}
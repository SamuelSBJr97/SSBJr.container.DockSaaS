@page "/login"
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject ApiClient ApiClient
@inject ILogger<Login> Logger
@inject IJSRuntime JSRuntime

<main class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div class="bg-white p-8 rounded-lg shadow-lg">
            <form @onsubmit="HandleSubmit" @onsubmit:preventDefault="true">
                <div class="text-center mb-6">
                    <h1 class="text-3xl font-bold text-blue-600">DockSaaS</h1>
                </div>
                
                <div class="text-center mb-4">
                    <h2 class="text-xl font-semibold text-gray-900">
                        @(isRegister ? "Create Account" : "Sign In")
                    </h2>
                </div>

                @if (!string.IsNullOrEmpty(apiConnectionStatus))
                {
                    <div class="mb-3 p-3 rounded @(apiConnectionStatus.Contains("âœ“") ? "bg-green-100 text-green-700" : "bg-yellow-100 text-yellow-700")">
                        @apiConnectionStatus
                    </div>
                }

                @if (isRegister)
                {
                    <div class="mb-3">
                        <label class="block text-sm font-medium text-gray-700 mb-1">First Name</label>
                        <input @bind="registerRequest.FirstName" 
                               type="text" 
                               required
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                    </div>

                    <div class="mb-3">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
                        <input @bind="registerRequest.LastName" 
                               type="text" 
                               required
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                    </div>

                    <div class="mb-3">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Company/Tenant Name</label>
                        <input @bind="registerRequest.TenantName" 
                               type="text" 
                               required
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                    </div>

                    <div class="mb-3">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                        <input @bind="registerRequest.Email" 
                               type="email" 
                               required
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                    </div>

                    <div class="mb-3">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                        <input @bind="registerRequest.Password" 
                               type="password" 
                               required
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                    </div>
                }
                else
                {
                    <div class="mb-3">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                        <input @bind="loginRequest.Email" 
                               type="email" 
                               required
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                    </div>

                    <div class="mb-3">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                        <input @bind="loginRequest.Password" 
                               type="password" 
                               required
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                    </div>

                    <div class="mb-3">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Tenant Name (Optional)</label>
                        <input @bind="loginRequest.TenantName" 
                               type="text"
                               placeholder="Leave empty to use default tenant"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                    </div>
                }

                @if (!isRegister)
                {
                    <button type="button" 
                            @onclick="PopulateDefaultCredentials"
                            class="mb-3 text-sm text-blue-600 hover:text-blue-800 underline">
                        Use Default Admin Credentials
                    </button>
                }

                <button type="submit"
                        disabled="@isLoading"
                        class="w-full mb-3 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed">
                    @if (isLoading)
                    {
                        <span class="flex items-center justify-center">
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            @(isRegister ? "Creating Account..." : "Signing In...")
                        </span>
                    }
                    else
                    {
                        @(isRegister ? "Create Account" : "Sign In")
                    }
                </button>

                <hr class="mb-3" />

                <button type="button"
                        @onclick="ToggleMode"
                        class="w-full text-blue-600 hover:text-blue-800 py-2 px-4 border border-blue-600 rounded-md hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                    @(isRegister ? "Already have an account? Sign In" : "Don't have an account? Sign Up")
                </button>

                <button type="button"
                        @onclick="TestApiConnection"
                        class="w-full mt-2 text-gray-600 hover:text-gray-800 py-2 px-4 border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2">
                    Test API Connection
                </button>
            </form>
        </div>
    </div>
</main>

@code {
    private bool isLoading = false;
    private bool isRegister = false;
    private string apiConnectionStatus = "";

    private LoginRequest loginRequest = new();
    private RegisterRequest registerRequest = new();

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already logged in
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Logger.LogInformation("User already authenticated, redirecting to dashboard");
            Navigation.NavigateTo("/", true);
            return;
        }

        await TestApiConnection();
    }

    private void PopulateDefaultCredentials()
    {
        loginRequest.Email = "admin@docksaas.com";
        loginRequest.Password = "Admin123!";
        loginRequest.TenantName = "";
        
        Logger.LogInformation("Default credentials populated");
        Console.WriteLine("Notification");
    }

    private async Task TestApiConnection()
    {
        try
        {
            Logger.LogInformation("Testing API connection...");
            apiConnectionStatus = "?? Testing API connection...";
            StateHasChanged();

            // Use the new health check method that doesn't try to deserialize JSON
            var isHealthy = await ApiClient.CheckHealthAsync();
            
            if (isHealthy)
            {
                apiConnectionStatus = "? API connection successful";
                Logger.LogInformation("API connection test successful");
            }
            else
            {
                apiConnectionStatus = "?? API connection failed - check if API is running on https://localhost:7000";
                Logger.LogWarning("API connection test failed");
            }
        }
        catch (Exception ex)
        {
            apiConnectionStatus = $"? API connection error: {ex.Message}";
            Logger.LogError(ex, "API connection test error");
        }
        
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        isLoading = true;
        bool result = false;

        try
        {
            Logger.LogInformation("Starting {Action} process", isRegister ? "registration" : "login");

            if (isRegister)
            {
                result = await AuthService.RegisterAsync(registerRequest);
                if (result)
                {
                    Console.WriteLine("Notification");
                    Logger.LogInformation("Registration successful for user {Email}", registerRequest.Email);
                    
                    // Wait a moment for the auth state to be processed
                    await Task.Delay(500);
                    
                    // Get current user and notify authentication provider
                    var user = await AuthService.GetCurrentUserAsync();
                    if (user != null && AuthStateProvider is CustomAuthenticationStateProvider customProvider)
                    {
                        customProvider.MarkUserAsAuthenticated(user);
                        Logger.LogInformation("Authentication state updated for user {Email}", user.Email);
                        
                        // Wait for state change to propagate
                        await Task.Delay(200);
                    }
                    
                    // Navigate to dashboard
                    Navigation.NavigateTo("/", true);
                }
                else
                {
                    Console.WriteLine("Notification");
                    Logger.LogWarning("Registration failed for user {Email}", registerRequest.Email);
                }
            }
            else
            {
                result = await AuthService.LoginAsync(loginRequest);
                if (result)
                {
                    Console.WriteLine("Notification");
                    Logger.LogInformation("Login successful for user {Email}", loginRequest.Email);
                    
                    // Wait a moment for the auth state to be processed
                    await Task.Delay(500);
                    
                    // Get current user and notify authentication provider
                    var user = await AuthService.GetCurrentUserAsync();
                    if (user != null && AuthStateProvider is CustomAuthenticationStateProvider customProvider)
                    {
                        customProvider.MarkUserAsAuthenticated(user);
                        Logger.LogInformation("Authentication state updated for user {Email}", user.Email);
                        
                        // Wait for state change to propagate
                        await Task.Delay(200);
                    }
                    
                    // Navigate to dashboard
                    Navigation.NavigateTo("/", true);
                }
                else
                {
                    Console.WriteLine("Notification");
                    Logger.LogWarning("Login failed for user {Email}", loginRequest.Email);
                    
                    // Test API connection again if login fails
                    await TestApiConnection();
                }
            }
        }
        catch (Exception ex)
        {
            var errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine("Notification");
            Logger.LogError(ex, "Error during {Action}", isRegister ? "registration" : "login");
            
            // Test API connection again if there's an exception
            await TestApiConnection();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleMode()
    {
        isRegister = !isRegister;
        // Reset forms
        loginRequest = new();
        registerRequest = new();
        
        Logger.LogInformation("Toggled to {Mode} mode", isRegister ? "registration" : "login");
    }
}

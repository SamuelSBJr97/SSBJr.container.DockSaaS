@page "/services"
@attribute [Authorize]
@inject IServiceInstanceService ServiceInstanceService
@using SSBJr.DockSaaS.Web.Components.Shared

<PageTitle>Services - DockSaaS</PageTitle>

<div class="flex items-center justify-between mb-6">
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Services</h1>
    <a href="/services/create" 
       class="inline-flex items-center px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
        </svg>
        Create Service
    </a>
</div>

@if (isLoading)
{
    <div class="w-full bg-gray-200 rounded-full h-2 mb-4 dark:bg-gray-700">
        <div class="bg-blue-600 h-2 rounded-full animate-pulse"></div>
    </div>
}

<div class="bg-white dark:bg-gray-800 shadow-lg rounded-lg overflow-hidden">
    @if (serviceInstances.Any())
    {
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <div class="flex items-center justify-between">
                <h2 class="text-lg font-medium text-gray-900 dark:text-white">Service Instances</h2>
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                        </svg>
                    </div>
                    <input @bind="searchString" 
                           placeholder="Search services..." 
                           class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white dark:bg-gray-700 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm"/>
                </div>
            </div>
        </div>
        
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead class="bg-gray-50 dark:bg-gray-700">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Type</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Status</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Endpoint</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Usage</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Created</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                    @foreach(var service in serviceInstances.Where(FilterFunc))
                    {
                        <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
                        <!-- Name -->
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="mr-3">
                                    @{
                                        var iconClass = GetServiceIcon(service.ServiceType) switch
                                        {
                                            "database" => "w-5 h-5 text-blue-500",
                                            "api" => "w-5 h-5 text-green-500",
                                            "web" => "w-5 h-5 text-purple-500",
                                            _ => "w-5 h-5 text-gray-500"
                                        };
                                    }
                                    <svg class="@iconClass" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        @if (GetServiceIcon(service.ServiceType) == "database")
                                        {
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4"/>
                                        }
                                        else if (GetServiceIcon(service.ServiceType) == "api")
                                        {
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                                        }
                                        else
                                        {
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"/>
                                        }
                                    </svg>
                                </div>
                                <span class="text-sm font-medium text-gray-900 dark:text-white">@service.Name</span>
                            </div>
                        </td>
                        
                        <!-- Type -->
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800 dark:bg-gray-200 dark:text-gray-900">
                                @service.ServiceType
                            </span>
                        </td>
                        
                        <!-- Status -->
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full 
                                         @(GetStatusColor(service.Status) == "success" ? "bg-green-100 text-green-800 dark:bg-green-200 dark:text-green-900" :
                                           GetStatusColor(service.Status) == "warning" ? "bg-yellow-100 text-yellow-800 dark:bg-yellow-200 dark:text-yellow-900" :
                                           GetStatusColor(service.Status) == "error" ? "bg-red-100 text-red-800 dark:bg-red-200 dark:text-red-900" :
                                           "bg-gray-100 text-gray-800 dark:bg-gray-200 dark:text-gray-900")">
                                @service.Status
                            </span>
                        </td>
                        
                        <!-- Endpoint -->
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                            @if (!string.IsNullOrEmpty(service.EndpointUrl))
                            {
                                <a href="@service.EndpointUrl" target="_blank" class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300">
                                    @TruncateUrl(service.EndpointUrl, 30)
                                </a>
                            }
                            else
                            {
                                <span class="text-gray-500 dark:text-gray-400">Not configured</span>
                            }
                        </td>
                        
                        <!-- Usage -->
                        <td class="px-6 py-4 whitespace-nowrap">
                            @if (service.UsageQuota > 0)
                            {
                                var percentage = (double)service.CurrentUsage / service.UsageQuota * 100;
                                <div class="w-full">
                                    <div class="flex justify-between text-xs text-gray-600 dark:text-gray-400 mb-1">
                                        <span>@FormatBytes(service.CurrentUsage) / @FormatBytes(service.UsageQuota)</span>
                                        <span>@percentage.ToString("F1")%</span>
                                    </div>
                                    <div class="w-full bg-gray-200 rounded-full h-2 dark:bg-gray-700">
                                        <div class="h-2 rounded-full @(GetUsageColor(percentage) == "success" ? "bg-green-600" :
                                                                       GetUsageColor(percentage) == "warning" ? "bg-yellow-600" :
                                                                       GetUsageColor(percentage) == "error" ? "bg-red-600" : "bg-blue-600")" 
                                             style="width: @percentage%"></div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <span class="text-sm text-gray-600 dark:text-gray-400">@FormatBytes(service.CurrentUsage) (No limit)</span>
                            }
                        </td>
                        
                        <!-- Created -->
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                            @service.CreatedAt.ToString("MMM dd, yyyy")
                        </td>
                        
                        <!-- Actions -->
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <div class="flex space-x-2">
                                @if (service.Status == "Stopped")
                                {
                                    <button @onclick="@(() => StartService(service.Id))" 
                                            class="text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-300 p-1 rounded"
                                            title="Start Service">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h1m4 0h1M5 12v2a3 3 0 003 3h4a3 3 0 003-3v-2H5z"/>
                                        </svg>
                                    </button>
                                }
                                else if (service.Status == "Running")
                                {
                                    <button @onclick="@(() => StopService(service.Id))" 
                                            class="text-yellow-600 hover:text-yellow-900 dark:text-yellow-400 dark:hover:text-yellow-300 p-1 rounded"
                                            title="Stop Service">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 10h6v4H9z"/>
                                        </svg>
                                    </button>
                                }
                                <a href="/services/@service.Id" 
                                   class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 p-1 rounded"
                                   title="View Details">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                                    </svg>
                                </a>
                                <button @onclick="@(() => ConfigureService(service.Id))" 
                                        class="text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-300 p-1 rounded"
                                        title="Configure">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                                    </svg>
                                </button>
                                <button @onclick="@(() => DeleteService(service.Id, service.Name))" 
                                        class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300 p-1 rounded"
                                        title="Delete Service">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                    </svg>
                                </button>
                            </div>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (!isLoading)
    {
        <div class="text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a4 4 0 004-4V9a2 2 0 00-2-2h-2V5z"/>
            </svg>
            <h3 class="mt-4 text-lg font-medium text-gray-900 dark:text-white">No services found</h3>
            <p class="mt-2 text-sm text-gray-500 dark:text-gray-400 mb-4">
                @(string.IsNullOrEmpty(searchString) ? "Create your first service to get started" : "No services match your search criteria")
            </p>
            @if (string.IsNullOrEmpty(searchString))
            {
                <a href="/services/create" 
                   class="inline-flex items-center px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                    </svg>
                    Create First Service
                </a>
            }
        </div>
    }
</div>

<!-- Confirmation Modal -->
<ConfirmationModal @ref="confirmationModal" OnResult="OnConfirmationResult" />

@code {
    private bool isLoading = true;
    private List<ServiceInstanceDto> serviceInstances = new();
    private string searchString = "";
    private ConfirmationModal confirmationModal = default!;
    private Guid pendingDeleteId;
    private string pendingDeleteName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadServices();
    }

    private async Task LoadServices()
    {
        isLoading = true;
        try
        {
            serviceInstances = await ServiceInstanceService.GetServiceInstancesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load services: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool FilterFunc(ServiceInstanceDto service)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        
        return service.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               service.ServiceType.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               service.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task StartService(Guid serviceId)
    {
        var result = await ServiceInstanceService.StartServiceInstanceAsync(serviceId);
        if (result)
        {
            Console.WriteLine("Service started successfully");
            await LoadServices();
        }
        else
        {
            Console.WriteLine("Failed to start service");
        }
    }

    private async Task StopService(Guid serviceId)
    {
        var result = await ServiceInstanceService.StopServiceInstanceAsync(serviceId);
        if (result)
        {
            Console.WriteLine("Service stopped successfully");
            await LoadServices();
        }
        else
        {
            Console.WriteLine("Failed to stop service");
        }
    }

    private void DeleteService(Guid serviceId, string serviceName)
    {
        pendingDeleteId = serviceId;
        pendingDeleteName = serviceName;
        confirmationModal.Show(
            "Delete Service", 
            $"Are you sure you want to delete '{serviceName}'? This action cannot be undone.",
            "Delete",
            "Cancel"
        );
    }

    private async Task OnConfirmationResult(bool confirmed)
    {
        if (confirmed)
        {
            var deleteResult = await ServiceInstanceService.DeleteServiceInstanceAsync(pendingDeleteId);
            if (deleteResult)
            {
                Console.WriteLine($"Service '{pendingDeleteName}' deleted successfully");
                await LoadServices();
            }
            else
            {
                Console.WriteLine("Failed to delete service");
            }
        }
    }

    private void ConfigureService(Guid serviceId)
    {
        Console.WriteLine("Service configuration not yet implemented");
    }

    private string GetServiceIcon(string serviceType) => serviceType switch
    {
        "S3Storage" => "storage",
        "RDSDatabase" => "storage",
        "NoSQLDatabase" => "table_chart",
        "Queue" => "queue",
        "Function" => "functions",
        "Kafka" => "dns",
        _ => "cloud"
    };

    private string GetStatusColor(string status) => status switch
    {
        "Running" => "success",
        "Stopped" => "default",
        "Error" => "error",
        "Created" => "info",
        _ => "default"
    };

    private string GetUsageColor(double percentage) => percentage switch
    {
        var x when x < 70 => "success",
        var x when x < 90 => "warning",
        _ => "error"
    };

    private string TruncateUrl(string url, int maxLength)
    {
        if (url.Length <= maxLength) return url;
        return $"{url[..maxLength]}...";
    }

    private string FormatBytes(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}}}

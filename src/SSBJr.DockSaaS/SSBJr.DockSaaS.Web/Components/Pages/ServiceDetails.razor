@page "/services/{ServiceId:guid}"
@attribute [Authorize]
@inject IServiceInstanceService ServiceInstanceService
@inject IDashboardService DashboardService
@inject NavigationManager Navigation
@using SSBJr.DockSaaS.Web.Components.Shared

<PageTitle>Service Details - DockSaaS</PageTitle>

@if (isLoading)
{
    <div class="w-full bg-gray-200 rounded-full h-2 mb-4">
        <div class="bg-blue-600 h-2 rounded-full animate-pulse" style="width: 100%"></div>
    </div>
}
else if (serviceInstance == null)
{
    <div class="bg-red-50 border border-red-200 rounded-md p-4 mb-4">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                </svg>
            </div>
            <div class="ml-3">
                <h3 class="text-sm font-medium text-red-800">
                    Service not found or you don't have permission to view it.
                </h3>
                <div class="mt-2">
                    <a href="/services" class="text-sm bg-red-100 text-red-800 font-medium py-1.5 px-3 rounded-md hover:bg-red-200">
                        Back to Services
                    </a>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="flex items-center justify-between mb-6">
        <div class="flex items-center">
            <button @onclick="@(() => Navigation.NavigateTo("/services"))"
                    class="mr-3 p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-md transition-colors">
                <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
            </button>
            <div class="text-3xl mr-3">@GetServiceIcon(serviceInstance.ServiceType)</div>
            <div>
                <h3 class="text-2xl font-bold text-gray-900">@serviceInstance.Name</h3>
                <p class="text-sm text-gray-600">@serviceInstance.ServiceDefinitionName</p>
            </div>
        </div>
        <div class="flex space-x-3">
            @if (serviceInstance.Status == "Stopped")
            {
                <button @onclick="StartService"
                        disabled="@isUpdating"
                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed">
                    <svg class="h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                    </svg>
                    Start Service
                </button>
            }
            else if (serviceInstance.Status == "Running")
            {
                <button @onclick="StopService"
                        disabled="@isUpdating"
                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 disabled:opacity-50 disabled:cursor-not-allowed">
                    <svg class="h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clip-rule="evenodd" />
                    </svg>
                    Stop Service
                </button>
            }
            <button @onclick="DeleteService"
                    disabled="@isUpdating"
                    class="inline-flex items-center px-4 py-2 border border-red-300 text-sm font-medium rounded-md text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed">
                <svg class="h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" clip-rule="evenodd" />
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414L7.586 12l-1.293 1.293a1 1 0 001.414 1.414L9 13.414l1.293 1.293a1 1 0 001.414-1.414L10.414 12l1.293-1.293z" clip-rule="evenodd" />
                </svg>
                Delete
            </button>
        </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Service Overview -->
        <div class="lg:col-span-2">
            <div class="bg-white rounded-lg shadow-lg mb-6">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h6 class="text-lg font-semibold text-gray-900">Service Overview</h6>
                </div>
                <div class="p-6">
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                            <span class="@GetStatusChipClasses(serviceInstance.Status) inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium">
                                @serviceInstance.Status
                            </span>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Service Type</label>
                            <p class="text-sm text-gray-900">@serviceInstance.ServiceType</p>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Created</label>
                            <p class="text-sm text-gray-900">@serviceInstance.CreatedAt.ToString("MMM dd, yyyy HH:mm")</p>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Last Updated</label>
                            <p class="text-sm text-gray-900">@serviceInstance.UpdatedAt.ToString("MMM dd, yyyy HH:mm")</p>
                        </div>
                        @if (!string.IsNullOrEmpty(serviceInstance.EndpointUrl))
                        {
                            <div class="sm:col-span-2 mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-1">Endpoint URL</label>
                                <a href="@serviceInstance.EndpointUrl" target="_blank" class="text-blue-600 hover:text-blue-800 underline">
                                    @serviceInstance.EndpointUrl
                                </a>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(serviceInstance.ApiKey))
                        {
                            <div class="sm:col-span-2 mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-1">API Key</label>
                                <div class="flex items-center space-x-2">
                                    <input type="text" 
                                           value="@(showApiKey ? serviceInstance.ApiKey : "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà")"
                                           readonly
                                           class="flex-1 px-3 py-2 border border-gray-300 rounded-md bg-gray-50" />
                                    <button @onclick="ToggleApiKeyVisibility"
                                            class="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-md transition-colors"
                                            title="Toggle API Key Visibility">
                                        @(showApiKey ? "üëÅÔ∏è‚Äçüó®Ô∏è" : "üëÅÔ∏è")
                                    </button>
                                    <button @onclick="CopyApiKey"
                                            class="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-md transition-colors"
                                            title="Copy API Key">
                                        üìã
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Usage Statistics -->
            <div class="bg-white rounded-lg shadow-lg mb-6">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h6 class="text-lg font-semibold text-gray-900">Usage Statistics</h6>
                </div>
                <div class="p-6">
                    @if (serviceInstance.UsageQuota > 0)
                    {
                        var usagePercent = (double)serviceInstance.CurrentUsage / serviceInstance.UsageQuota * 100;
                        <div class="mb-4">
                            <div class="flex justify-between mb-2">
                                <span class="text-sm font-medium text-gray-700">Storage Usage</span>
                                <span class="text-sm text-gray-500">@FormatBytes(serviceInstance.CurrentUsage) / @FormatBytes(serviceInstance.UsageQuota)</span>
                            </div>
                            <div class="w-full bg-gray-200 rounded-full h-2">
                                <div class="@GetUsageBarClasses(usagePercent) h-2 rounded-full" style="width: @usagePercent.ToString("F1")%"></div>
                            </div>
                            <p class="text-xs text-gray-500 mt-1">@usagePercent.ToString("F1")% used</p>
                        </div>
                    }
                    else
                    {
                        <p class="text-sm text-gray-500">
                            Current Usage: @FormatBytes(serviceInstance.CurrentUsage) (No limit set)
                        </p>
                    }
                </div>
            </div>
        </div>

        <!-- Service Metrics -->
        <div>
            <div class="bg-white rounded-lg shadow-lg mb-6">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h6 class="text-lg font-semibold text-gray-900">Recent Metrics</h6>
                </div>
                <div class="p-6">
                    @if (metrics.Any())
                    {
                        @foreach (var metricGroup in metrics.GroupBy(m => m.MetricName).Take(5))
                        {
                            var latestMetric = metricGroup.OrderByDescending(m => m.Timestamp).First();
                            <div class="mb-3">
                                <div class="flex justify-between">
                                    <span class="text-sm text-gray-700">@FormatMetricName(latestMetric.MetricName)</span>
                                    <span class="text-sm font-medium text-gray-900">@latestMetric.Value.ToString("F2") @latestMetric.Unit</span>
                                </div>
                                <p class="text-xs text-gray-500">
                                    @latestMetric.Timestamp.ToString("HH:mm:ss")
                                </p>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-sm text-gray-500">No metrics available</p>
                    }
                </div>
            </div>

            <!-- Configuration -->
            <div class="bg-white rounded-lg shadow-lg">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h6 class="text-lg font-semibold text-gray-900">Configuration</h6>
                </div>
                <div class="p-6">
                    <details class="bg-gray-50 rounded-lg p-4">
                        <summary class="font-medium text-gray-900 cursor-pointer">View Configuration</summary>
                        <div class="mt-4">
                            <pre class="text-xs text-gray-700 whitespace-pre-wrap break-words">@FormatJson(serviceInstance.Configuration)</pre>
                        </div>
                    </details>
                </div>
            </div>
        </div>
    </div>
}

<!-- Confirmation Modal -->
<ConfirmationModal @ref="confirmationModal" OnResult="OnConfirmationResult" />

@code {
    [Parameter] public Guid ServiceId { get; set; }

    private bool isLoading = true;
    private bool isUpdating = false;
    private bool showApiKey = false;
    private ServiceInstanceDto? serviceInstance;
    private List<ServiceMetricDto> metrics = new();
    private ConfirmationModal confirmationModal = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadServiceDetails();
    }

    private async Task LoadServiceDetails()
    {
        isLoading = true;
        try
        {
            serviceInstance = await ServiceInstanceService.GetServiceInstanceAsync(ServiceId);
            if (serviceInstance != null)
            {
                metrics = await ServiceInstanceService.GetServiceInstanceMetricsAsync(ServiceId, DateTime.UtcNow.AddHours(-1));
            }
        }
        catch (Exception)
        {
            Console.WriteLine("Notification");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task StartService()
    {
        isUpdating = true;
        try
        {
            var result = await ServiceInstanceService.StartServiceInstanceAsync(ServiceId);
            if (result)
            {
                Console.WriteLine("Notification");
                await LoadServiceDetails();
            }
            else
            {
                Console.WriteLine("Notification");
            }
        }
        finally
        {
            isUpdating = false;
        }
    }

    private async Task StopService()
    {
        isUpdating = true;
        try
        {
            var result = await ServiceInstanceService.StopServiceInstanceAsync(ServiceId);
            if (result)
            {
                Console.WriteLine("Notification");
                await LoadServiceDetails();
            }
            else
            {
                Console.WriteLine("Notification");
            }
        }
        finally
        {
            isUpdating = false;
        }
    }

    private void DeleteService()
    {
        if (serviceInstance == null) return;

        confirmationModal.Show(
            "Delete Service", 
            $"Are you sure you want to delete '{serviceInstance.Name}'? This action cannot be undone.",
            "Delete",
            "Cancel"
        );
    }

    private async Task OnConfirmationResult(bool confirmed)
    {
        if (confirmed)
        {
            var deleteResult = await ServiceInstanceService.DeleteServiceInstanceAsync(ServiceId);
            if (deleteResult)
            {
                Console.WriteLine($"Service '{serviceInstance?.Name}' deleted successfully");
                Navigation.NavigateTo("/services");
            }
            else
            {
                Console.WriteLine("Failed to delete service");
            }
        }
    }

    private void ToggleApiKeyVisibility()
    {
        showApiKey = !showApiKey;
    }

    private Task CopyApiKey()
    {
        if (serviceInstance?.ApiKey != null)
        {
            // In a real application, you would use JSInterop to copy to clipboard
            Console.WriteLine("Notification");
        }
        return Task.CompletedTask;
    }

    private string GetServiceIcon(string serviceType) => serviceType switch
    {
        "S3Storage" => "üíæ",
        "RDSDatabase" => "üóÑÔ∏è",
        "NoSQLDatabase" => "üìä",
        "Queue" => "üìã",
        "Function" => "‚ö°",
        _ => "‚òÅÔ∏è"
    };

    private string GetStatusChipClasses(string status) => status switch
    {
        "Running" => "bg-green-100 text-green-800",
        "Stopped" => "bg-gray-100 text-gray-800",
        "Error" => "bg-red-100 text-red-800",
        "Created" => "bg-blue-100 text-blue-800",
        _ => "bg-gray-100 text-gray-800"
    };

    private string GetUsageBarClasses(double percentage) => percentage switch
    {
        var x when x < 70 => "bg-green-500",
        var x when x < 90 => "bg-yellow-500",
        _ => "bg-red-500"
    };

    private string FormatBytes(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private string FormatMetricName(string metricName)
    {
        var formatted = System.Text.RegularExpressions.Regex.Replace(metricName, "(\\B[A-Z])", " $1")
            .Replace("_", " ");
        return System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(formatted.ToLower());
    }

    private string FormatJson(string json)
    {
        try
        {
            var jsonDocument = System.Text.Json.JsonDocument.Parse(json);
            return System.Text.Json.JsonSerializer.Serialize(jsonDocument, new JsonSerializerOptions { WriteIndented = true });
        }
        catch
        {
            return json;
        }
    }
}

@using System.Text.Json
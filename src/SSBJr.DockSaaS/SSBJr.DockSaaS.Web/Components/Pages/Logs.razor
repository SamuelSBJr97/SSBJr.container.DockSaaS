@page "/logs"
@attribute [Authorize]
@inject IDashboardService DashboardService


<PageTitle>Audit Logs - DockSaaS</PageTitle>

<div class="p-6">
    <h1 class="text-3xl font-bold text-gray-900 mb-6">Audit Logs</h1>

    <!-- Filters Card -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Log Level</label>
                <select @onchange="OnLevelChanged" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="All">All Levels</option>
                    <option value="Info">Info</option>
                    <option value="Warning">Warning</option>
                    <option value="Error">Error</option>
                    <option value="Critical">Critical</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Entity Type</label>
                <select @onchange="OnEntityTypeChanged" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="All">All Types</option>
                    <option value="User">User</option>
                    <option value="Service">Service</option>
                    <option value="Tenant">Tenant</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">From Date</label>
                <input type="date" @bind="fromDate" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">To Date</label>
                <input type="date" @bind="toDate" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="mb-6">
            <div class="w-full bg-gray-200 rounded-full h-2.5">
                <div class="bg-blue-600 h-2.5 rounded-full animate-pulse" style="width: 100%"></div>
            </div>
        </div>
    }

    <!-- Logs Table Card -->
    <div class="bg-white rounded-lg shadow-md">
        <div class="p-6 border-b border-gray-200 flex justify-between items-center">
            <h2 class="text-xl font-semibold text-gray-900">Activity Log</h2>
            <div class="flex items-center space-x-4">
                <div class="relative">
                    <input type="text" @bind="searchString" @bind:event="oninput" placeholder="Search logs..." 
                           class="pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                </div>
                <button @onclick="LoadLogs" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 flex items-center space-x-2">
                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    <span>Refresh</span>
                </button>
            </div>
        </div>

        <div class="overflow-hidden">
            <div class="overflow-x-auto" style="max-height: 600px;">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50 sticky top-0">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Level</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Entity</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IP Address</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var logItem in filteredLogs)
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-500">@logItem.Timestamp.ToString("MMM dd HH:mm:ss")</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full @GetLevelClasses(logItem.Level)">
                                        @logItem.Level
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @if (!string.IsNullOrEmpty(logItem.UserName))
                                    {
                                        <div class="text-sm text-gray-900">@logItem.UserName</div>
                                    }
                                    else
                                    {
                                        <div class="text-sm text-gray-500">System</div>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">@logItem.Action</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">@logItem.EntityType</div>
                                </td>
                                <td class="px-6 py-4">
                                    @if (!string.IsNullOrEmpty(logItem.Description))
                                    {
                                        <div class="text-sm text-gray-900 max-w-xs truncate" title="@logItem.Description">
                                            @(logItem.Description.Length > 50 ? logItem.Description.Substring(0, 50) + "..." : logItem.Description)
                                        </div>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @if (!string.IsNullOrEmpty(logItem.IpAddress))
                                    {
                                        <div class="text-sm text-gray-500">@logItem.IpAddress</div>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Pagination (if needed) -->
        <div class="bg-white px-4 py-3 border-t border-gray-200 sm:px-6">
            <div class="flex items-center justify-between">
                <div class="flex-1 flex justify-between sm:hidden">
                    <a href="#" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">Previous</a>
                    <a href="#" class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">Next</a>
                </div>
                <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                    <div>
                        <p class="text-sm text-gray-700">
                            Showing <span class="font-medium">@Math.Min(filteredLogs.Count, 25)</span> of <span class="font-medium">@filteredLogs.Count</span> results
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private List<AuditLogDto> auditLogs = new();
    private string searchString = "";
    private string selectedLevel = "All";
    private string selectedEntityType = "All";
    private DateTime? fromDate = DateTime.Today.AddDays(-7);
    private DateTime? toDate = DateTime.Today.AddDays(1);

    private List<AuditLogDto> filteredLogs => auditLogs
        .Where(log => 
            (selectedLevel == "All" || log.Level == selectedLevel) &&
            (selectedEntityType == "All" || log.EntityType == selectedEntityType) &&
            (!fromDate.HasValue || log.Timestamp >= fromDate.Value) &&
            (!toDate.HasValue || log.Timestamp <= toDate.Value) &&
            (string.IsNullOrWhiteSpace(searchString) || 
             log.Action.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
             log.EntityType.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
             (log.Description?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
             (log.UserName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)))
        .OrderByDescending(log => log.Timestamp)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
    }

    private async Task LoadLogs()
    {
        isLoading = true;
        try
        {
            auditLogs = await DashboardService.GetRecentActivitiesAsync(100);
            
            // Add some mock data for demonstration
            if (!auditLogs.Any())
            {
                auditLogs = GenerateMockLogs();
            }
        }
        catch (Exception)
        {
            // Log error or show notification
            Console.WriteLine("Error loading logs");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnLevelChanged(ChangeEventArgs e)
    {
        selectedLevel = e.Value?.ToString() ?? "All";
        StateHasChanged();
    }

    private void OnEntityTypeChanged(ChangeEventArgs e)
    {
        selectedEntityType = e.Value?.ToString() ?? "All";
        StateHasChanged();
    }

    private List<AuditLogDto> GenerateMockLogs()
    {
        var random = new Random();
        var logs = new List<AuditLogDto>();
        var actions = new[] { "Create", "Update", "Delete", "Login", "Logout", "Start", "Stop" };
        var entities = new[] { "User", "Service", "Tenant", "Configuration" };
        var levels = new[] { "Info", "Warning", "Error" };
        var users = new[] { "Admin User", "John Doe", "Jane Smith", null };

        for (int i = 0; i < 50; i++)
        {
            var entityType = entities[random.Next(entities.Length)];
            var action = actions[random.Next(actions.Length)];
            var level = levels[random.Next(levels.Length)];
            var user = users[random.Next(users.Length)];

            logs.Add(new AuditLogDto
            {
                Id = Guid.NewGuid(),
                UserId = user != null ? Guid.NewGuid() : null,
                UserName = user,
                TenantId = Guid.NewGuid(),
                Action = action,
                EntityType = entityType,
                EntityId = Guid.NewGuid(),
                Description = $"{action} {entityType.ToLower()} operation completed",
                IpAddress = $"192.168.1.{random.Next(1, 255)}",
                UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                Timestamp = DateTime.UtcNow.AddMinutes(-random.Next(0, 10080)), // Within last week
                Level = level
            });
        }

        return logs.OrderByDescending(l => l.Timestamp).ToList();
    }

    private string GetLevelClasses(string level) => level switch
    {
        "Info" => "bg-blue-100 text-blue-800",
        "Warning" => "bg-yellow-100 text-yellow-800",
        "Error" => "bg-red-100 text-red-800",
        "Critical" => "bg-red-100 text-red-800",
        _ => "bg-gray-100 text-gray-800"
    };
}


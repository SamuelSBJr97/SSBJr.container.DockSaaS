@page "/services/create"
@attribute [Authorize]
@inject IServiceInstanceService ServiceInstanceService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using System.Text.Json

<PageTitle>Create Service - DockSaaS</PageTitle>

<h3 class="text-2xl font-bold text-gray-900 mb-6">Create New Service</h3>

<div class="bg-white rounded-lg shadow-lg">
    <div class="p-6">
        <form @onsubmit="SubmitForm" @onsubmit:preventDefault="true">
            <div class="space-y-6">
                <!-- Service Selection -->
                <div>
                    <h6 class="text-lg font-semibold text-gray-900 mb-4">Select Service Type</h6>
                    @if (isLoadingDefinitions)
                    {
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div class="bg-blue-600 h-2 rounded-full animate-pulse" style="width: 100%"></div>
                        </div>
                    }
                    else
                    {
                        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                            @foreach (var definition in serviceDefinitions)
                            {
                                <div class="col-span-1">
                                    <div class="@(selectedDefinition?.Id == definition.Id ? "bg-blue-50 border-blue-500 shadow-lg" : "bg-white border-gray-200 shadow-md") border rounded-lg p-4 cursor-pointer h-full hover:shadow-lg transition-shadow duration-200"
                                         @onclick="@(() => SelectServiceDefinition(definition))">
                                        <div class="text-center">
                                            <div class="text-3xl mb-2">@GetServiceIcon(definition.Type)</div>
                                            <h6 class="text-lg font-semibold text-gray-900">@definition.Name</h6>
                                            <p class="text-sm text-gray-600">
                                                @definition.Description
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>

                @if (selectedDefinition != null)
                {
                    <!-- Service Configuration -->
                    <div>
                        <hr class="my-6 border-gray-200" />
                        <h6 class="text-lg font-semibold text-gray-900 mb-4">Configure @selectedDefinition.Name</h6>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Service Name</label>
                            <input @bind="serviceName"
                                   type="text" 
                                   required
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                            <p class="mt-1 text-sm text-gray-500">Unique name for your service instance</p>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Usage Quota (bytes)</label>
                            <input @bind="usageQuota"
                                   type="number" 
                                   min="0"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                            <p class="mt-1 text-sm text-gray-500">0 = unlimited</p>
                        </div>
                    </div>

                    <!-- Dynamic Configuration Fields -->
                    <div>
                        <details class="bg-gray-50 rounded-lg p-4">
                            <summary class="font-medium text-gray-900 cursor-pointer">Advanced Configuration</summary>
                            <div class="mt-4">
                                @if (configurationFields.Any())
                                {
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        @foreach (var field in configurationFields)
                                        {
                                            <div>
                                                @if (field.Type == "string")
                                                {
                                                    <label class="block text-sm font-medium text-gray-700 mb-1">@field.Label</label>
                                                    <input @bind="field.Value"
                                                           type="text"
                                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                                    @if (!string.IsNullOrEmpty(field.Description))
                                                    {
                                                        <p class="mt-1 text-sm text-gray-500">@field.Description</p>
                                                    }
                                                }
                                                else if (field.Type == "boolean")
                                                {
                                                    <label class="flex items-center">
                                                        <input @bind="field.BoolValue"
                                                               type="checkbox"
                                                               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                                        <span class="ml-2 text-sm font-medium text-gray-700">@field.Label</span>
                                                    </label>
                                                }
                                                else if (field.Type == "integer")
                                                {
                                                    <label class="block text-sm font-medium text-gray-700 mb-1">@field.Label</label>
                                                    <input @bind="field.IntValue"
                                                           type="number"
                                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                                    @if (!string.IsNullOrEmpty(field.Description))
                                                    {
                                                        <p class="mt-1 text-sm text-gray-500">@field.Description</p>
                                                    }
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <p class="text-sm text-gray-500">
                                        No additional configuration required for this service type.
                                    </p>
                                }
                            </div>
                        </details>
                    </div>

                    <!-- Actions -->
                    <div>
                        <hr class="my-6 border-gray-200" />
                        <div class="flex justify-end space-x-3">
                            <button type="button" 
                                    @onclick="Cancel"
                                    class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                Cancel
                            </button>
                            <button type="button" 
                                    @onclick="CreateServiceInstance"
                                    disabled="@(!success || isCreating)"
                                    class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center">
                                @if (isCreating)
                                {
                                    <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    <text>Creating...</text>
                                }
                                else
                                {
                                    <span class="mr-2">➕</span>
                                    <text>Create Service</text>
                                }
                            </button>
                        </div>
                    </div>
                }
            </div>
        </form>
    </div>
</div>

@code {
    private ElementReference form;
    private bool success = false;
    private bool isLoadingDefinitions = true;
    private bool isCreating = false;

    private List<ServiceDefinitionDto> serviceDefinitions = new();
    private ServiceDefinitionDto? selectedDefinition;
    
    private string serviceName = "";
    private long usageQuota = 0;
    private List<ConfigurationField> configurationFields = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadServiceDefinitions();
    }

    private async Task LoadServiceDefinitions()
    {
        isLoadingDefinitions = true;
        try
        {
            serviceDefinitions = await ServiceInstanceService.GetServiceDefinitionsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load service definitions: {ex.Message}");
        }
        finally
        {
            isLoadingDefinitions = false;
        }
    }

    private void SelectServiceDefinition(ServiceDefinitionDto definition)
    {
        selectedDefinition = definition;
        LoadConfigurationFields();
    }

    private void LoadConfigurationFields()
    {
        configurationFields.Clear();
        
        if (selectedDefinition == null) return;

        try
        {
            var defaultConfig = JsonSerializer.Deserialize<JsonElement>(selectedDefinition.DefaultConfiguration);
            
            foreach (var property in defaultConfig.EnumerateObject())
            {
                var field = new ConfigurationField
                {
                    Name = property.Name,
                    Label = FormatFieldLabel(property.Name)
                };

                switch (property.Value.ValueKind)
                {
                    case JsonValueKind.String:
                        field.Type = "string";
                        field.Value = property.Value.GetString() ?? "";
                        break;
                    case JsonValueKind.Number:
                        field.Type = "integer";
                        field.IntValue = property.Value.GetInt32();
                        break;
                    case JsonValueKind.True:
                    case JsonValueKind.False:
                        field.Type = "boolean";
                        field.BoolValue = property.Value.GetBoolean();
                        break;
                }

                configurationFields.Add(field);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to parse configuration schema: {ex.Message}");
        }
    }

    private async Task CreateServiceInstance()
    {
        if (!success || selectedDefinition == null) return;

        isCreating = true;
        try
        {
            var configuration = BuildConfiguration();
            
            var request = new CreateServiceInstanceRequest
            {
                Name = serviceName,
                ServiceDefinitionId = selectedDefinition.Id,
                Configuration = configuration,
                UsageQuota = usageQuota
            };

            var result = await ServiceInstanceService.CreateServiceInstanceAsync(request);
            
            if (result != null)
            {
                Console.WriteLine($"Service '{serviceName}' created successfully");
                Navigation.NavigateTo($"/services/{result.Id}");
            }
            else
            {
                Console.WriteLine("Failed to create service");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating service: {ex.Message}");
        }
        finally
        {
            isCreating = false;
        }
    }

    private async Task SubmitForm()
    {
        await CreateServiceInstance();
    }

    private string BuildConfiguration()
    {
        var config = new Dictionary<string, object>();
        
        foreach (var field in configurationFields)
        {
            object value = field.Type switch
            {
                "string" => field.Value,
                "integer" => field.IntValue,
                "boolean" => field.BoolValue,
                _ => field.Value
            };
            config[field.Name] = value;
        }

        return JsonSerializer.Serialize(config);
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/services");
    }

    private string GetServiceIcon(string serviceType) => serviceType switch
    {
        "S3Storage" => "💾",
        "RDSDatabase" => "🗄️",
        "NoSQLDatabase" => "📊",
        "Queue" => "📋",
        "Function" => "⚡",
        _ => "☁️"
    };

    private string FormatFieldLabel(string fieldName)
    {
        // Convert camelCase to Title Case
        return System.Text.RegularExpressions.Regex.Replace(fieldName, "(\\B[A-Z])", " $1");
    }

    private class ConfigurationField
    {
        public string Name { get; set; } = "";
        public string Label { get; set; } = "";
        public string Type { get; set; } = "";
        public string Description { get; set; } = "";
        public string Value { get; set; } = "";
        public int IntValue { get; set; }
        public bool BoolValue { get; set; }
    }
}

# DockSaaS API ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: docksaas-api-config
  namespace: docksaas
data:
  ASPNETCORE_ENVIRONMENT: "Production"
  ASPNETCORE_URLS: "http://+:8080"
  ServiceEndpoints__BaseUrl: "http://docksaas-api-service:8080"
  JwtSettings__Issuer: "DockSaaS"
  JwtSettings__Audience: "DockSaaSUsers"
---
# DockSaaS API Secret
apiVersion: v1
kind: Secret
metadata:
  name: docksaas-api-secret
  namespace: docksaas
type: Opaque
data:
  ConnectionStrings__DefaultConnection: SG9zdD1wb3N0Z3Jlcy1zZXJ2aWNlO0RhdGFiYXNlPWRvY2tzYWFzZGI7VXNlcm5hbWU9cG9zdGdyZXM7UGFzc3dvcmQ9cG9zdGdyZXM7 # base64 encoded connection string
  ConnectionStrings__Redis: cmVkaXMtc2VydmljZTo2Mzc5 # base64 encoded "redis-service:6379"
  JwtSettings__Secret: RG9ja1NhYVMtU3VwZXItU2VjcmV0LUtleS1UaGF0LVNob3VsZC1CZS1DaGFuZ2VkLUluLVByb2R1Y3Rpb24tMjAyNCE= # base64 encoded JWT secret
---
# DockSaaS API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docksaas-api
  namespace: docksaas
  labels:
    app: docksaas-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: docksaas-api
  template:
    metadata:
      labels:
        app: docksaas-api
    spec:
      containers:
      - name: docksaas-api
        image: docksaas/api:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: docksaas-api-config
        - secretRef:
            name: docksaas-api-secret
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c', 'until pg_isready -h postgres-service -U postgres; do echo waiting for postgres; sleep 2; done;']
      - name: wait-for-redis
        image: redis:7-alpine
        command: ['sh', '-c', 'until redis-cli -h redis-service ping; do echo waiting for redis; sleep 2; done;']
---
# DockSaaS API Service
apiVersion: v1
kind: Service
metadata:
  name: docksaas-api-service
  namespace: docksaas
spec:
  selector:
    app: docksaas-api
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP
---
# DockSaaS Web ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: docksaas-web-config
  namespace: docksaas
data:
  ASPNETCORE_ENVIRONMENT: "Production"
  ASPNETCORE_URLS: "http://+:8080"
  ApiBaseUrl: "http://docksaas-api-service:8080"
  ApiServiceUrl: "http://docksaas-api-service:8080"
---
# DockSaaS Web Secret
apiVersion: v1
kind: Secret
metadata:
  name: docksaas-web-secret
  namespace: docksaas
type: Opaque
data:
  ConnectionStrings__Redis: cmVkaXMtc2VydmljZTo2Mzc5 # base64 encoded "redis-service:6379"
---
# DockSaaS Web Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docksaas-web
  namespace: docksaas
  labels:
    app: docksaas-web
spec:
  replicas: 2
  selector:
    matchLabels:
      app: docksaas-web
  template:
    metadata:
      labels:
        app: docksaas-web
    spec:
      containers:
      - name: docksaas-web
        image: docksaas/web:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: docksaas-web-config
        - secretRef:
            name: docksaas-web-secret
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
      initContainers:
      - name: wait-for-api
        image: busybox:1.35
        command: ['sh', '-c', 'until wget --spider -q http://docksaas-api-service:8080/health; do echo waiting for api; sleep 2; done;']
---
# DockSaaS Web Service
apiVersion: v1
kind: Service
metadata:
  name: docksaas-web-service
  namespace: docksaas
spec:
  selector:
    app: docksaas-web
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP
---
# DockSaaS Web Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: docksaas-ingress
  namespace: docksaas
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  rules:
  - host: docksaas.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: docksaas-web-service
            port:
              number: 8080
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: docksaas-api-service
            port:
              number: 8080
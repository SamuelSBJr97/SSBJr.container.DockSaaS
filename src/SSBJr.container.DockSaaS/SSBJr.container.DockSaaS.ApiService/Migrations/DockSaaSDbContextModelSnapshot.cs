// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SSBJr.container.DockSaaS.ApiService.Data;

#nullable disable

namespace SSBJr.container.DockSaaS.ApiService.Migrations
{
    [DbContext(typeof(DockSaaSDbContext))]
    partial class DockSaaSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Info");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Timestamp");

                    b.HasIndex("UserId", "Timestamp");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.ServiceDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConfigurationSchema")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultConfiguration")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ServiceDefinitions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            ConfigurationSchema = "{\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"bucketName\": {\"type\": \"string\", \"required\": true},\r\n        \"region\": {\"type\": \"string\", \"default\": \"us-east-1\"},\r\n        \"encryption\": {\"type\": \"boolean\", \"default\": false},\r\n        \"versioning\": {\"type\": \"boolean\", \"default\": false}\r\n    }\r\n}",
                            CreatedAt = new DateTime(2025, 9, 3, 1, 48, 39, 424, DateTimeKind.Utc).AddTicks(501),
                            DefaultConfiguration = "{\r\n    \"bucketName\": \"\",\r\n    \"region\": \"us-east-1\",\r\n    \"encryption\": false,\r\n    \"versioning\": false\r\n}",
                            Description = "Object storage service similar to AWS S3",
                            IconUrl = "/icons/storage.svg",
                            IsActive = true,
                            Name = "S3-like Storage",
                            Type = "S3Storage",
                            UpdatedAt = new DateTime(2025, 9, 3, 1, 48, 39, 424, DateTimeKind.Utc).AddTicks(504)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            ConfigurationSchema = "{\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"engine\": {\"type\": \"string\", \"enum\": [\"postgresql\", \"mysql\", \"sqlserver\"], \"default\": \"postgresql\"},\r\n        \"instanceClass\": {\"type\": \"string\", \"default\": \"db.t3.micro\"},\r\n        \"allocatedStorage\": {\"type\": \"integer\", \"default\": 20},\r\n        \"multiAZ\": {\"type\": \"boolean\", \"default\": false}\r\n    }\r\n}",
                            CreatedAt = new DateTime(2025, 9, 3, 1, 48, 39, 424, DateTimeKind.Utc).AddTicks(517),
                            DefaultConfiguration = "{\r\n    \"engine\": \"postgresql\",\r\n    \"instanceClass\": \"db.t3.micro\",\r\n    \"allocatedStorage\": 20,\r\n    \"multiAZ\": false\r\n}",
                            Description = "Relational database service similar to AWS RDS",
                            IconUrl = "/icons/database.svg",
                            IsActive = true,
                            Name = "RDS-like Database",
                            Type = "RDSDatabase",
                            UpdatedAt = new DateTime(2025, 9, 3, 1, 48, 39, 424, DateTimeKind.Utc).AddTicks(517)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            ConfigurationSchema = "{\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"tableName\": {\"type\": \"string\", \"required\": true},\r\n        \"billingMode\": {\"type\": \"string\", \"enum\": [\"PROVISIONED\", \"PAY_PER_REQUEST\"], \"default\": \"PAY_PER_REQUEST\"},\r\n        \"readCapacity\": {\"type\": \"integer\", \"default\": 5},\r\n        \"writeCapacity\": {\"type\": \"integer\", \"default\": 5}\r\n    }\r\n}",
                            CreatedAt = new DateTime(2025, 9, 3, 1, 48, 39, 424, DateTimeKind.Utc).AddTicks(522),
                            DefaultConfiguration = "{\r\n    \"tableName\": \"\",\r\n    \"billingMode\": \"PAY_PER_REQUEST\",\r\n    \"readCapacity\": 5,\r\n    \"writeCapacity\": 5\r\n}",
                            Description = "NoSQL database service similar to AWS DynamoDB",
                            IconUrl = "/icons/nosql.svg",
                            IsActive = true,
                            Name = "DynamoDB-like NoSQL",
                            Type = "NoSQLDatabase",
                            UpdatedAt = new DateTime(2025, 9, 3, 1, 48, 39, 424, DateTimeKind.Utc).AddTicks(522)
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            ConfigurationSchema = "{\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"queueName\": {\"type\": \"string\", \"required\": true},\r\n        \"visibilityTimeout\": {\"type\": \"integer\", \"default\": 30},\r\n        \"messageRetention\": {\"type\": \"integer\", \"default\": 1209600},\r\n        \"delaySeconds\": {\"type\": \"integer\", \"default\": 0}\r\n    }\r\n}",
                            CreatedAt = new DateTime(2025, 9, 3, 1, 48, 39, 424, DateTimeKind.Utc).AddTicks(527),
                            DefaultConfiguration = "{\r\n    \"queueName\": \"\",\r\n    \"visibilityTimeout\": 30,\r\n    \"messageRetention\": 1209600,\r\n    \"delaySeconds\": 0\r\n}",
                            Description = "Message queue service similar to AWS SQS",
                            IconUrl = "/icons/queue.svg",
                            IsActive = true,
                            Name = "SQS-like Queue",
                            Type = "Queue",
                            UpdatedAt = new DateTime(2025, 9, 3, 1, 48, 39, 424, DateTimeKind.Utc).AddTicks(527)
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            ConfigurationSchema = "{\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"functionName\": {\"type\": \"string\", \"required\": true},\r\n        \"runtime\": {\"type\": \"string\", \"enum\": [\"dotnet8\", \"node18\", \"python3.9\"], \"default\": \"dotnet8\"},\r\n        \"timeout\": {\"type\": \"integer\", \"default\": 30},\r\n        \"memory\": {\"type\": \"integer\", \"default\": 128}\r\n    }\r\n}",
                            CreatedAt = new DateTime(2025, 9, 3, 1, 48, 39, 424, DateTimeKind.Utc).AddTicks(531),
                            DefaultConfiguration = "{\r\n    \"functionName\": \"\",\r\n    \"runtime\": \"dotnet8\",\r\n    \"timeout\": 30,\r\n    \"memory\": 128\r\n}",
                            Description = "Serverless function service similar to AWS Lambda",
                            IconUrl = "/icons/function.svg",
                            IsActive = true,
                            Name = "Lambda-like Functions",
                            Type = "Function",
                            UpdatedAt = new DateTime(2025, 9, 3, 1, 48, 39, 424, DateTimeKind.Utc).AddTicks(532)
                        });
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.ServiceInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiKey")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CurrentUsage")
                        .HasColumnType("bigint");

                    b.Property<string>("EndpointUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ServiceDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Created");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UsageQuota")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServiceDefinitionId");

                    b.HasIndex("TenantId");

                    b.HasIndex("Name", "TenantId")
                        .IsUnique();

                    b.ToTable("ServiceInstances");
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.ServiceMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ServiceInstanceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tags")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ServiceInstanceId", "MetricName", "Timestamp");

                    b.ToTable("ServiceMetrics");
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApiCallsLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Free");

                    b.Property<long>("StorageLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1073741824L);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TenantId");

                    b.HasIndex("Email", "TenantId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SSBJr.container.DockSaaS.ApiService.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SSBJr.container.DockSaaS.ApiService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SSBJr.container.DockSaaS.ApiService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SSBJr.container.DockSaaS.ApiService.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSBJr.container.DockSaaS.ApiService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SSBJr.container.DockSaaS.ApiService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.AuditLog", b =>
                {
                    b.HasOne("SSBJr.container.DockSaaS.ApiService.Models.Tenant", "Tenant")
                        .WithMany("AuditLogs")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSBJr.container.DockSaaS.ApiService.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.ServiceInstance", b =>
                {
                    b.HasOne("SSBJr.container.DockSaaS.ApiService.Models.ServiceDefinition", "ServiceDefinition")
                        .WithMany("ServiceInstances")
                        .HasForeignKey("ServiceDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSBJr.container.DockSaaS.ApiService.Models.Tenant", "Tenant")
                        .WithMany("ServiceInstances")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceDefinition");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.ServiceMetric", b =>
                {
                    b.HasOne("SSBJr.container.DockSaaS.ApiService.Models.ServiceInstance", "ServiceInstance")
                        .WithMany("Metrics")
                        .HasForeignKey("ServiceInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceInstance");
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.User", b =>
                {
                    b.HasOne("SSBJr.container.DockSaaS.ApiService.Models.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.ServiceDefinition", b =>
                {
                    b.Navigation("ServiceInstances");
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.ServiceInstance", b =>
                {
                    b.Navigation("Metrics");
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.Tenant", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("ServiceInstances");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SSBJr.container.DockSaaS.ApiService.Models.User", b =>
                {
                    b.Navigation("AuditLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
